<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="tables_referential_integrity" xml:lang="en-US">
    <title>Referential integrity</title>
    <shortdesc>Explaining the importance of referential integrity and its rules.</shortdesc>
    <prolog>
        <critdates>
            <created date="2017-10-05"/>
            <revised modified="2017-10-05"/>
        </critdates>
        <metadata>
            <keywords>
                <indexterm>Relationships</indexterm>
                <indexterm>Referential integrity</indexterm>
            </keywords>
        </metadata>
    </prolog>
    <conbody>
        <p>Referential integrity is a system of rules by which it is ensured that the internal
            consistency between the tables is ensured. Access then ensures that relations between
            records in related tables are valid, and related information is not inadvertently
            removed or altered.</p>
        <p>Referential integrity is handled through the dialog box <wintitle>Edit
                Relationships</wintitle> by selecting the box <uicontrol>Enforce Referential
                Integrity</uicontrol>.</p>
        <p>When referential integrity is set then the following rules apply:</p>
        <ul>
            <li>You can not specify a value for the foreign key in the related table if that value
                is not in the primary key of the primary table. For example, you can not enter
                orders for a nonexistent client. When you want to enter an order for a new customer
                then you must first create the client and then the order.</li>
            <li>A record from a primary table can not be deleted if matching records exist in a
                related table. So you can not delete a record from the Customers table if there are
                still records for this customer in the Orders table.</li>
            <li>A value of the primary key in the primary table can not be changed if this record
                has related records in the related table. So you can not change the CustomerCode in
                the Customers table if there are records for this customer in the Orders table.</li>
        </ul>
        <p>When the referential integrity is enforced and any of the foregoing rules is violated by
            an action, then an appropriate error message is displayed. The following figure shows an
            example of this.<fig>
                <title>Error message when entering an order for a non existing client</title>
                <image keyref="warning_referential_integrity">
                    <alt>Error message when entering an order for a non existing client</alt>
                </image>
            </fig></p>
        <p>You can set referential integrity between two tables on the following conditions</p>
        <ul>
            <li>Both of these tables are in the same Access database.</li>
            <li>The linked field in the primary table is a primary key or has a unique index.</li>
            <li>The linked fields have the same data type and numeric fields must have the same
                field length.<note type="attention">AutoNumber fields may be linked to fields of the
                    type Number providing that the property Field Size has the value Long
                    Integer.</note></li>
            <li>Existing data in both tables don't violate the rules of referential integrity.</li>
        </ul>
        <p>When existing data in the tables break the rules for referential integrity, these
            violations must be addressed first. Usually, these problems arise by any of the
            following causes.</p>
        <ol>
            <li>The fields that are linked to each other are not of the same data type or do not
                have the same length. This is easy to solve by changes in the design of one or both
                tables.</li>
            <li>In the table at the <term>many-side</term> exist records with values in the linking
                field that don't exist in the table at the <term>one-side</term>. This occurs when
                you delete a record in the table on the on- side without deleting the corresponding
                records in the table on the many-side. In fact, this creates orphans in the table on
                the many-side. Fortunately, Access provides a type of query with which you can find
                these orphans and delete them yet. If this is the case, select <menucascade>
                    <uicontrol>tab Create</uicontrol>
                    <uicontrol>Query Wizard (group Queries)</uicontrol>
                    <uicontrol>Find Unmatched Query Wizard</uicontrol>
                </menucascade>. </li>
        </ol>
    </conbody>
</concept>
